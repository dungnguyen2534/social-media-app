datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum MediaType {
    IMAGE
    VIDEO
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String    @unique
    emailVerified DateTime?
    image         String?
    bio           String?
    accounts      Account[]
    sessions      Session[]

    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    usernameUpdatedAt DateTime?

    posts      Post[]
    post_likes PostLike[]
    bookmarks  Bookmark[]

    comments      Comment[]
    comment_likes CommentLike[]

    following Follow[] @relation("Following")
    followers Follow[] @relation("Followers")

    @@map("users")
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
    @@map("verificationTokens")
}

model Follow {
    followerId  String
    follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
    followingId String
    following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

    @@unique([followerId, followingId])
    @@map("follows")
}

model Post {
    id          String  @id @default(cuid())
    content     String?
    attachments Media[]

    sharedPostId String?
    sharedPost   Post?   @relation("SharedPost", fields: [sharedPostId], references: [id], onDelete: SetNull)

    likes     PostLike[]
    comments  Comment[]
    shares    Post[]     @relation("SharedPost")
    bookmarks Bookmark[]

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("posts")
}

model Media {
    id     String  @id @default(cuid())
    postId String?

    // onDelete: SetNull is to keep this when delete post to later find and delete the media on Uploadthing 
    post Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
    type MediaType
    url  String

    createdAt DateTime @default(now())

    @@map("post_media")
}

model PostLike {
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@map("post_likes")
}

model Bookmark {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@unique([userId, postId])
    @@map("bookmarks")
}

model Comment {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    content String

    parentCommentId String?
    parent          Comment?      @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
    replies         Comment[]     @relation("CommentReplies")
    likes           CommentLike[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("comments")
}

model CommentLike {
    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    commentId String
    comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([userId, commentId])
    @@map("comment_likes")
}
